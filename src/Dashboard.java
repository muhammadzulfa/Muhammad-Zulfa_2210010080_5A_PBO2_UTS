
import java.lang.reflect.Type;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;

import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JOptionPane;
import java.io.FileReader;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.io.File;
import com.google.gson.JsonSyntaxException;
import java.util.List;


/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author mhmmd
 */
public class Dashboard extends javax.swing.JFrame {
    private ArrayList<Agenda> daftarAgenda;

    /**
     * Creates new form Dashboard
     */
    public Dashboard() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        btnTambahAgenda = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblAgenda = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        menuEksporJSON = new javax.swing.JMenuItem();
        menuImporJSON = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        menuLogout = new javax.swing.JMenu();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Dashboard Agenda Pribadi");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        btnTambahAgenda.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnTambahAgenda.setText("Tambah Agenda");
        btnTambahAgenda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTambahAgendaActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Daftar Agenda Saya");

        tblAgenda.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tanggal", "Judul", "Deskripsi", "Kategori", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblAgenda.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblAgendaMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblAgenda);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnTambahAgenda)
                .addGap(15, 15, 15))
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 867, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnTambahAgenda)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 570, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jMenu1.setText("File");

        menuEksporJSON.setText("Ekspor .JSON");
        menuEksporJSON.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEksporJSONActionPerformed(evt);
            }
        });
        jMenu1.add(menuEksporJSON);

        menuImporJSON.setText("Impor .JSON");
        menuImporJSON.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuImporJSONActionPerformed(evt);
            }
        });
        jMenu1.add(menuImporJSON);

        jMenuItem3.setText("Exit");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        menuLogout.setText("Logout");
        menuLogout.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                menuLogoutItemStateChanged(evt);
            }
        });
        menuLogout.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                menuLogoutMenuSelected(evt);
            }
        });
        menuLogout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuLogoutMouseClicked(evt);
            }
        });
        menuLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuLogoutActionPerformed(evt);
            }
        });
        jMenuBar1.add(menuLogout);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnTambahAgendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTambahAgendaActionPerformed
        // Buka form tambah agenda
        TambahAgenda formTambahAgenda = new TambahAgenda(this);
        formTambahAgenda.setVisible(true);
    }//GEN-LAST:event_btnTambahAgendaActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        getAllData();
    }//GEN-LAST:event_formWindowOpened

    private void tblAgendaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblAgendaMouseClicked
        // Mendapatkan indeks baris yang dipilih
        int row = tblAgenda.getSelectedRow();
        // System.out.println(row);

        // Cek apakah baris yang dipilih valid
        if (row != -1) {
            try {
                // Ambil data dari tabel berdasarkan indeks baris
                String tanggal = tblAgenda.getValueAt(row, 0).toString(); // Misal kolom 0 untuk tanggal
                String judul = tblAgenda.getValueAt(row, 1).toString();   // Misal kolom 1 untuk judul
                String deskripsi = tblAgenda.getValueAt(row, 2).toString(); // Misal kolom 2 untuk deskripsi
                String kategori = tblAgenda.getValueAt(row, 3).toString(); // Misal kolom 3 untuk kategori
                String status = tblAgenda.getValueAt(row, 4).toString();   // Misal kolom 4 untuk status
                
                // Dapatkan index baris untuk referensi lebih lanjut
                int agendaIndex = row;  // Menggunakan indeks baris
                
                // Membuka form UbahAgenda dan mengirimkan data yang dipilih beserta index-nya
                UbahAgenda formUbah = new UbahAgenda(this, agendaIndex, tanggal, judul, deskripsi, kategori, status);
                formUbah.setVisible(true); // Tampilkan form UbahAgenda
            } catch (ParseException ex) {
                Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_tblAgendaMouseClicked

    private void menuEksporJSONActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEksporJSONActionPerformed
        // Membuka dialog untuk memilih lokasi file
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Pilih Lokasi untuk Menyimpan File JSON");
        fileChooser.setSelectedFile(new java.io.File("agenda_data.json"));

        int userSelection = fileChooser.showSaveDialog(this);
        if (userSelection == JFileChooser.APPROVE_OPTION) {
            // Mendapatkan path file yang dipilih oleh pengguna
            String filePath = fileChooser.getSelectedFile().getAbsolutePath();

            // Mengonversi data daftarAgenda menjadi format JSON menggunakan Gson
            Gson gson = new Gson();
            String json = gson.toJson(daftarAgenda);

            // Menyimpan JSON ke dalam file
            try (FileWriter fileWriter = new FileWriter(filePath)) {
                fileWriter.write(json);
                fileWriter.flush();
                JOptionPane.showMessageDialog(this, "Data berhasil diekspor ke " + filePath);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat mengekspor data: " + e.getMessage());
            }
        }
    }//GEN-LAST:event_menuEksporJSONActionPerformed

    private void menuImporJSONActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuImporJSONActionPerformed
         // Membuka dialog untuk memilih file
        JFileChooser fileChooser = new JFileChooser();

        // Menambahkan filter hanya untuk file JSON
        FileNameExtensionFilter filter = new FileNameExtensionFilter("JSON Files", "json");
        fileChooser.setFileFilter(filter);

        // Menampilkan dialog file untuk memilih file
        int result = fileChooser.showOpenDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            // Mendapatkan file yang dipilih
            File selectedFile = fileChooser.getSelectedFile();

            // Mengimpor data dari file JSON yang dipilih
            // Membaca file JSON dan mengonversinya menjadi ArrayList<Agenda>
            try (FileReader reader = new FileReader(selectedFile.getAbsolutePath())) {
                // Menghapus daftarAgenda yang ada terlebih dahulu
                daftarAgenda.clear();

                // Membaca dan mengonversi JSON ke dalam ArrayList<Agenda>
                Gson gson = new Gson();
                AgendaPribadi[] importedAgendaArray = gson.fromJson(reader, AgendaPribadi[].class);

                // Jika data berhasil dibaca dan tidak kosong
                if (importedAgendaArray != null && importedAgendaArray.length > 0) {
                    // Mengonversi array ke ArrayList dan menambahkan data ke daftarAgenda
                    ArrayList<AgendaPribadi> importedAgenda = new ArrayList<>(List.of(importedAgendaArray));
                    daftarAgenda.addAll(importedAgenda); // Menambahkan data ke daftarAgenda

                    // Memperbarui tampilan tabel
                    isiDataTabel(); // Memperbarui tabel setelah data diimpor

                    System.out.println("Data berhasil diimpor dari " + selectedFile.getAbsolutePath());
                } else {
                    System.out.println("File JSON kosong atau tidak berisi data yang valid.");
                }
            } catch (IOException e) {
                System.out.println("Gagal membaca file JSON: " + e.getMessage());
            } catch (JsonSyntaxException e) {
                System.out.println("Format JSON tidak valid: " + e.getMessage());
            }
        }
    }//GEN-LAST:event_menuImporJSONActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void menuLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuLogoutActionPerformed
        
    }//GEN-LAST:event_menuLogoutActionPerformed

    private void menuLogoutItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_menuLogoutItemStateChanged
        
    }//GEN-LAST:event_menuLogoutItemStateChanged

    private void menuLogoutMenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_menuLogoutMenuSelected
        
    }//GEN-LAST:event_menuLogoutMenuSelected

    private void menuLogoutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuLogoutMouseClicked
        // Menampilkan dialog konfirmasi
        int option = JOptionPane.showConfirmDialog(this, 
                "Apakah Anda yakin ingin logout?", 
                "Konfirmasi", 
                JOptionPane.YES_NO_OPTION, 
                JOptionPane.QUESTION_MESSAGE);

        // Jika pengguna memilih YES, buka form Welcome
        if (option == JOptionPane.YES_OPTION) {
            // Buka form welcome
            Welcome formWelcome = new Welcome();
            formWelcome.setVisible(true);

            // Menutup form saat ini
            this.dispose();
        }
    }//GEN-LAST:event_menuLogoutMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Dashboard().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnTambahAgenda;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JMenuItem menuEksporJSON;
    private javax.swing.JMenuItem menuImporJSON;
    private javax.swing.JMenu menuLogout;
    private javax.swing.JTable tblAgenda;
    // End of variables declaration//GEN-END:variables

    private void getAllData() {
        daftarAgenda = new ArrayList<>();
//        daftarAgenda.add(new AgendaPribadi("2024-11-24", "Liburan ke Bali", "Pergi bersama keluarga", "Pribadi", "Belum Selesai"));
        
        isiDataTabel();
    }
    
    private void isiDataTabel() {
        DefaultTableModel model = (DefaultTableModel) tblAgenda.getModel();
        model.setRowCount(0); // Reset tabel
        
        // Looping data agenda untuk diparsing kedalam tabel
        for (Agenda agenda : daftarAgenda) {
            model.addRow(agenda.getDetail());
        }
    }
    
    public void tambahAgenda(Agenda agenda) {
        daftarAgenda.add(agenda);
        
        isiDataTabel();
    }
    
    public void ubahAgenda(int agendaIndex, Agenda agenda) {
        // Memastikan bahwa indeks valid
        if (agendaIndex >= 0 && agendaIndex < daftarAgenda.size()) {
            // System.out.println("Mengubah agenda dengan index: " + agendaIndex);
            
            // Mengganti agenda yang ada pada indeks dengan agenda yang baru
            daftarAgenda.set(agendaIndex, agenda);

            isiDataTabel();
        }
    }
    
    public void hapusAgenda(int agendaIndex) {
        daftarAgenda.remove(agendaIndex);
        
        isiDataTabel();
    }
}
